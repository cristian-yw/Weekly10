definitions:
  models.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: something went wrong
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.MovieDetail:
    properties:
      backdrop_path:
        type: string
      casts:
        items:
          type: string
        type: array
      director:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      overview:
        type: string
      poster_path:
        type: string
      release_date:
        type: string
      runtime:
        type: integer
      schedules:
        items:
          $ref: '#/definitions/models.Schedule'
        type: array
      title:
        type: string
    type: object
  models.Order:
    properties:
      id:
        type: integer
      order_date:
        type: string
      schedule_id:
        type: integer
      seats:
        items:
          type: string
        type: array
      status:
        type: string
      total_price:
        type: integer
      user_id:
        type: integer
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Schedule:
    properties:
      cinema:
        type: string
      date:
        type: string
      id:
        type: integer
      location:
        type: string
      movie_id:
        type: integer
      movie_title:
        type: string
      start_time:
        type: string
    type: object
  models.Seat:
    properties:
      cinema_id:
        type: integer
      id:
        type: integer
      is_booked:
        type: boolean
      seat_code:
        type: string
    type: object
  models.SuccessMessage:
    properties:
      message:
        example: Movie updated successfully
        type: string
    type: object
  models.TMDBMovie:
    properties:
      backdrop_path:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      overview:
        type: string
      popularity:
        type: number
      poster_path:
        type: string
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
      tmdb_id:
        type: integer
      vote_average:
        type: number
      vote_count:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserProfileResponse:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /admin/movies:
    post:
      consumes:
      - multipart/form-data
      description: Admin can add a new movie along with its schedules (cinema, location,
        time, date).
      parameters:
      - description: Movie Title
        in: formData
        name: title
        required: true
        type: string
      - description: Overview
        in: formData
        name: overview
        required: true
        type: string
      - description: Release Date (YYYY-MM-DD)
        in: formData
        name: release_date
        required: true
        type: string
      - description: Runtime in minutes
        in: formData
        name: runtime
        required: true
        type: integer
      - description: TMDB ID
        in: formData
        name: tmdb_id
        type: integer
      - description: Popularity
        in: formData
        name: popularity
        type: number
      - description: Vote Average
        in: formData
        name: vote_average
        type: number
      - description: Vote Count
        in: formData
        name: vote_count
        type: integer
      - description: Comma separated genres (e.g. Action,Drama)
        in: formData
        name: genres
        type: string
      - description: 'JSON array of schedules. Example: [{\'
        in: formData
        name: schedules
        type: string
      - description: Poster image file
        in: formData
        name: poster
        type: file
      - description: Backdrop image file
        in: formData
        name: backdrop
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: movie_id returned
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (Missing or invalid token)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie (with schedules)
      tags:
      - Admin
  /admin/movies/{id}:
    delete:
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete movie
      tags:
      - Admin
    get:
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TMDBMovie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get movie by ID
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Partial movie update (only send fields you want to update)
        in: body
        name: movie
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Patch update movie
      tags:
      - Admin
  /admin/sync/popular:
    post:
      description: Fetch popular movies from TMDB and store in database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Sync Popular Movies
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Mem-blacklist JWT token agar tidak bisa dipakai lagi.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Register info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register new user
      tags:
      - Auth
  /movies/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TMDBMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all movies
      tags:
      - Movies
  /movies/filter:
    get:
      parameters:
      - description: Movie name keyword
        in: query
        name: name
        type: string
      - description: Genre ID
        in: query
        name: genre_id
        type: integer
      - default: 10
        description: Number of movies per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TMDBMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Filter Movies
      tags:
      - Movies
  /movies/popular:
    get:
      parameters:
      - default: 10
        description: Number of movies per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TMDBMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Popular Movies
      tags:
      - Movies
  /movies/upcoming:
    get:
      parameters:
      - default: 10
        description: Number of movies per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TMDBMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Upcoming Movies
      tags:
      - Movies
  /orders/:
    post:
      consumes:
      - application/json
      description: Create a new order including seats selection
      parameters:
      - description: Order Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Order
      tags:
      - Orders
  /orders/{movieId}:
    get:
      description: Get detailed information of a specific movie
      parameters:
      - description: Movie ID
        in: path
        name: movieId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieDetail'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Movie Detail
      tags:
      - Orders
  /orders/{movieId}/schedules:
    get:
      description: |-
        Get all schedules for a specific movie with optional filters:
        - cinemaName (string, partial match)
        - locationName (string, partial match)
        - startTime (HH:MM format)
        - date (YYYY-MM-DD format)
      parameters:
      - description: Movie ID
        in: path
        name: movieId
        required: true
        type: integer
      - description: Filter by cinema name (partial match)
        in: query
        name: cinemaName
        type: string
      - description: Filter by location name (partial match)
        in: query
        name: locationName
        type: string
      - description: Filter by start time (HH:MM)
        in: query
        name: startTime
        type: string
      - description: Filter by date (YYYY-MM-DD)
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Schedule'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Movie Schedules with Filters
      tags:
      - Orders
  /orders/seats/{scheduleId}:
    get:
      description: Get available seats for a specific schedule
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Seat'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Available Seats
      tags:
      - Orders
  /user/history:
    get:
      description: Get logged-in user's order history
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Order History
      tags:
      - Users
  /user/password:
    patch:
      consumes:
      - application/json
      description: Ganti password akun. User harus mengirim password lama dan password
        baru.
      parameters:
      - description: Current & new password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: password updated successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: current password is incorrect
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Users
  /user/profile:
    get:
      description: Get logged-in user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfileResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Users
    patch:
      consumes:
      - multipart/form-data
      description: Edit profile sekaligus upload avatar (opsional). Hanya field yang
        dikirim yang akan di-update.
      parameters:
      - description: First name
        in: formData
        name: first_name
        type: string
      - description: Last name
        in: formData
        name: last_name
        type: string
      - description: Phone number
        in: formData
        name: phone
        type: string
      - description: Avatar image
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Enter your user JWT token like: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
